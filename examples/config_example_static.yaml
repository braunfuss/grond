%YAML 1.1
--- !grond.Config
# Path, where to store output (run-directories)
path_prefix: '..'
rundir_template: 'runs/${problem_name}.run'
dataset_config: !grond.DatasetConfig
  # File with hypocenter information and possibly reference solution
  events_path: 'data/events/${event_name}/event.txt'
  extend_incomplete: false

  # List of paths to InSAR data sets prepared with `kite`
  kite_scene_paths: ['data/events/${event_name}/insar']
  # List of paths to GNSS displacement vectors 
  gnss_campaign_paths: ['data/events/${event_name}/gnss']
  
# -----------------------------------------------------------------------------
# Configuration section selecting data to be included in the data optimization. 
# In this example these are InSAR displacements and GNSS coseismic displacements. 
# In the  target groups also the objective function for the optimization is 
# defined per group. The targets can be composed of one or more contributions, 
# each represented by a !grond.TargetConfig section.
# -----------------------------------------------------------------------------
target_groups:
# setup for InSAR
- !grond.SatelliteTargetGroup

  # misfits are normalized within each normalization_family separately
  normalisation_family: 'statics'
  # Name and group reference of this contribution
  path: 'insar'
  # How to weight the target group within in the global misfit
  weight: 1.0
  # Subsection defining the misfit
  misfit_config: !grond.SatelliteMisfitConfig
    # account for a remaining planar ramp in the InSAR data.
    optimise_orbital_ramp: true
    # define ranges for offset and gradients in m/m 
    ranges:
      offset: '-0.05 .. 0.05'
      ramp_east: '-1e-7 .. 1e-7'
      ramp_north: '-1e-7 .. 1e-7'
  
  # Green's function store to be used (see fomosto)
  store_id: 'Abruzzo_Ameri_nearfield'
  # list of individual InSAR scenes with scene identities.
  # Can be like here a '*all' wildcard. 
  kite_scenes: ['*all']
  
# setup for coseismic GNSS displacements
- !grond.GNSSCampaignTargetGroup

  # here set to be in the same family as InSAR targets
  normalisation_family: 'statics'
  path: 'gnss'
  weight: 1.0
  misfit_config: !grond.GNSSCampaignMisfitConfig {}
  store_id: 'Abruzzo_Ameri_nearfield'
  # list of individual GNSS campaign data with campaign identities.
  gnss_campaigns: ['*all']

# -----------------------------------------------------------------------------
# Definition of the problem to be solved - source model, parameter space, and
# global misfit configuration settings.
# -----------------------------------------------------------------------------
problem_config: !grond.RectangularProblemConfig
 
  # Name used when creating output directory
  name_template: 'rect_source'
  # Here a L2-norm is defined. Put to 1 for l1-norm
  norm_exponent: 2
  # Definition of model parameter space to be searched in the optimization
  ranges:
    # relative positions [m] to reference location in 'event.txt' 
    north_shift: '-2000 .. 20000'
    east_shift: '-2000 .. 20000'
    # depth [m] of the upper fault edge (not centroid!)
    depth: '5000 .. 30000'
    # fault dimensions and fault slip [m]
    length: '12000 .. 18000'
    width: '4000 .. 14000'
    slip: '0.2 .. 2.'
    # mechanism parameters [degree]
    strike: '80 .. 330'
    dip: '0 .. 60'
    rake: '60 .. 90'
    
  # decimation factor for point sources building the finite source 
  decimation_factor: 8
  # Define the norm for the global misfits combining the members of all defined 'normalization_family` 
  norm_exponent: 1

# -----------------------------------------------------------------------------
# Configuration of the optimization procedure. The following example setup will
# run a Bayesian bootstrap optimization (BABO).
# -----------------------------------------------------------------------------
 
optimiser_config: !grond.HighScoreOptimiserConfig
  nbootstrap: 0
  sampler_phases:
  - !grond.UniformSamplerPhase
      niterations: 5000
  - !grond.DirectedSamplerPhase
      niterations: 30000
      scatter_scale_begin: 1.6
      scatter_scale_end: 0.8

# -----------------------------------------------------------------------------
# The engine is the forward modelling machine and is here configured.
# -----------------------------------------------------------------------------

engine_config: !grond.EngineConfig
  # The Green's function stores have been given with the targets?
  gf_stores_from_pyrocko_config: true
  # there is a common folder containing gf stores 
  gf_store_superdirs: ['gf_stores']
  # ...
  gf_store_dirs: []
  